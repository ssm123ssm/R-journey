---
title: "R Journey"
author: "Supun Manathunga"
format: 
  revealjs:
    incremental: true
    transition: none
    background-transition: fade
    slide-number: true
    chalkboard: true
editor: visual
logo: foot.png
css: logo.css
---

## R Journey

`Introduction to data science with R`

<https://github.com/ssm123ssm/R-journey>

::: {.space}
:::


:::: {.columns}


::: {.column width=50%}

:::{.space}
:::

### `References`

[Introduction to Data Science](https://rafalab.dfci.harvard.edu/dsbook-part-1/)
[Advanced Data Science](https://rafalab.dfci.harvard.edu/dsbook-part-2/)

By Rafael A. Irizarry
:::

::: {.column width=50%}

::: {.padded}
![](qr.png)
:::
:::


::::

# Part 1 - Basics

## `R` and RStudio

## Why `R`?

::: incremental
> R is an open-source programming language and software environment designed for statistical computing, data analysis, and data visualization. It provides a powerful toolset for working with data, performing complex calculations, and creating high-quality graphics.
:::

-   The R console is an interactive command-line interface that allows you to directly execute R commands and see the results immediately. It serves as a simple environment for writing and testing R code, as well as exploring data and experimenting with various functions and packages.

## RStudio

> RStudio is a popular integrated development environment (IDE) for R. It provides a user-friendly interface that combines the R console, a code editor, and various panels for managing files, viewing data, plotting graphics, and accessing help documentation. RStudio streamlines the workflow for developing, debugging, and sharing R code and analyses.

## Installing packages

Packages are collections of R functions, data, and compiled code that provide additional tools and capabilities for specific tasks or domains. With thousands of packages available, you can easily enhance R's capabilities to suit your analytical needs.

::: {.fragment .fade-in}
The currently loaded packages can be viewed using the `sessionInfo()` function.
:::

## Tidyverse

<https://www.tidyverse.org/>

The tidyverse is a collection of R packages designed for data science that share a common philosophy, grammar, and data structures. It provides a consistent and intuitive approach to data manipulation, exploration, and visualization.

::: {.fragment .fade-in}
`install.packages("tidyverse")`

`install.packages("dslabs")`
:::

## RStudio workspace

![](images/clipboard-515311276.png)

## R Objects

R Objects are the fundamental building blocks of the R language. They represent various data structures such as vectors, matrices, lists, and data frames, as well as functions and user-defined objects. R Objects store data, code, and results, allowing you to perform operations, calculations, and manipulations on them.

## Case 1

::: {.fragment .fade-in}
$y = \beta_0 + \beta_1 x_1^2 + \beta_2 x_2$

Given $\beta_0$ is 2, $\beta_1$ is 3 and $\beta_2$ is 4, calculate the value of $y$, when $x_1$ is 5 and $x_2$ is 6
:::

::: {.fragment .fade-in-then-out}
```{r}
#| echo: true
b0 <-  2
b1 <-  3
b2 <-  4

x1 <-  5
x2 <-  6

y <-  b0 + b1*x1^2 + b2*x2

```
:::

::: fragment
```{r}
#| echo: true
print(y)
class(y)
```
:::

## Functions

In R, functions are first-class objects, meaning they can be treated like any other data object. This allows functions to be assigned to variables, passed as arguments to other functions, and even returned as outputs from functions.

::: fragment
``` r
function_name <- function(argument1, argument2, ...) {

  Function body
    Sequence of operations and calculations
    Using the arguments
    
return(output)

}
```
:::

## Case 2

``` r
solve <- function(x1, x2) {
  b0 <-  2
  b1 <-  3
  b2 <-  4
  y <-  b0 + b1*x1^2 + b2*x2
  return(y)
}

y2 <- solve(5, 6)


y2
class(solve)
class(y2)
```

## seq function and vectors

The `seq()` function in R is used to **generate a sequence of numbers**. It allows you to create vectors of numbers within a specified range or following a specific pattern. The basic syntax is:

`seq(from, to, by)`

::: {.fragment .fade-in}
For example, `seq(1, 10, by = 2)` will create a sequence of odd numbers from 1 to 9: `1, 3, 5, 7, 9`. The `seq()` function is versatile and can also generate sequences based on lengths or along specific vectors, making it a handy tool for creating numeric vectors in R.
:::

## Vectors

\
Vectors in R are fundamental data structures used to store collections of elements of the same data type. They can hold numeric, character, logical, or other types of data. Vectors can be created using the **`c()`** function, specifying elements separated by commas.

::: {.fragment .fade-in}
``` r
vec <- c(1,2,3,4)
class(vec)

class(seq(1,10))
```
:::

## Loops

Loops in R are programming constructs used for iterating over a sequence of elements or performing repetitive tasks. The two main types of loops in R are for and while loops.

-   For loops: These loops execute a block of code a predetermined number of times, iterating over elements of a sequence. They are useful when the number of iterations is known in advance.

-   While loops: These loops continue iterating as long as a specified condition is true. They are suitable for situations where the number of iterations is not known beforehand.

------------------------------------------------------------------------

A **`for`** loop in R consists of three main components: the loop variable, the sequence to iterate over, and the code block to execute for each iteration. The basic structure is as follows:

::: {.fragment .fade-in-then-out}
``` r
for (variable in sequence) {
  # Code to execute for each iteration
}
```
:::

::: {.fragment .fade-in}
### Find the sum of the first 100 numbers.
:::

::: {.fragment .fade-in-then-out}
```{r}
#| echo: true
sum <- 0
for (i in 1:100) {
  sum <- sum + i
}
sum
```
:::

::: {.fragment .fade-in}
In R, there's often more than one way to accomplish a task or solve a problem.
:::

## More interesting ways...

::: {.fragment .fade-in}
Using a function.
:::

::: {.fragment .fade-in}
The formula for getting the sum of the first $N$ integers is given by the arithmetic series formula:

$sum = \frac{N \times (N + 1)}{2}$
:::

::: {.fragment .fade-in-then-out}
```{r}
#| echo: true
getSum <- function(N) {
  N*(N+1)/2
}

getSum(100)
```
:::

::: {.fragment .fade-in}
### Or even in one line!

```{r}
#| echo: true
sum(1:100)
```
:::

## Challenge

### `Get the sum of the numbers divisible by 3, up to one million.`

::: {.fragment .fade-in-then-out}
```{r}
#| echo: true
sum <- 0
for (i in 1:1000000) {
  if (i %% 3 == 0) {
    sum <- sum + i
  }
}
```

```{r}
#| echo: true
print(sum)
```
:::

::: fragment
### Or...

```{r}
#| echo: true
sum(seq(3, 1000000, by = 3))
```
:::

## Dataframes

::: relative
::: {.fragment .fade-in-then-out .upper}
Dataframes in R are essential data structures used for storing tabular data in a structured format, similar to a spreadsheet or database table.

They are two-dimensional objects consisting of rows and columns, where each column can contain data of different types, such as numeric, character, or factor.
:::

::: {.fragment .fade-in .upper}
Dataframes can be created using functions like `data.frame()` or by importing data from external sources like CSV files using functions such as r`ead.csv()` or `read.table()`. Once created, dataframes allow for easy manipulation, analysis, and visualization of data using a wide range of built-in functions and packages.
:::
:::

## Loading dataframes

The `data()` function in R is used to load built-in datasets that come packaged with R or any installed packages. These datasets are often used for demonstration purposes or for practicing data analysis techniques.

::: {.fragment .fade-in}
```{r echo=TRUE}
library('dslabs')

data(murders)

```
:::

::: space
:::

::: {.fragment .fade-in}
```{r echo=TRUE}

head(murders)

```
:::

## Common functions used on dataframes

::: {.fragment .fade-in}
The `str()` function in R is used to display the internal structure of an R object. It provides a compact representation of the object's data type, dimensions (if applicable), and a glimpse of its contents.
:::

::: {.fragment .fade-in}
```{r}
#| echo: true
 str(murders)
```
:::

## Creating dataframes

Dataframes can be created in R using the `data.frame()` function, which allows you to combine vectors of different types into a structured tabular format. You can specify column names and assign values to each column using the `data.frame()` function.

::: {.fragment .fade-in}
```{r}
#| echo: true
dataFrame = data.frame(a = 1:6, b = 2:7)
```
:::

::: {.fragment .space}
:::

::: {.fragment .fade-in}
```{r}
#| echo: true
library(dplyr)
mutate(dataFrame, c = a + b)
```
:::

## Other commonly used dplyr functions

Here are some commonly used functions from the dplyr package in R:

-   `select()`: Subset columns from a data frame.
-   `filter()`: Subset rows based on conditions.
-   `mutate()`: Add new columns or modify existing ones.
-   `summarise()`: Compute summary statistics.
-   `group_by()`: Group data by one or more variables.
-   `left_join()`, `right_join()`, etc.: Combine data frames by matching rows.

# Part 2 - Data Visualization

## Exploratory Data Analysis (EDA)

::: {.fragment .fade-in}
Exploratory Data Analysis (EDA) is a crucial step in the data analysis process that involves examining and summarizing the main characteristics of a dataset.
:::

::: {.fragment .fade-in}
It helps to gain insights, detect patterns, and identify potential issues or outliers in the data before proceeding with further analysis or modeling. EDA is an iterative process that typically involves visualizations and statistical summaries.
:::

## Motivation

::: {.fragment .fade-in}
The murders dataset contains statistics on population, murder rates, and other socio-economic factors for different states in the United States.
:::

::: {.fragment .fade-in}
```{r}
#| echo: true

data("murders")
head(murders)
```
:::

::: {.fragment .fade-in}
`What are the factors associated with murder rates?`
:::

------------------------------------------------------------------------

![](images/clipboard-3944447522.png)

## The `pipe` Operator

::: {.fragment .fade-in}
The pipe operator (`%>%`) is a convenient way to express a sequence of operations in a more readable format.
:::

::: {.fragment .fade-in}
Instead of nesting functions inside one another, the pipe operator takes the output from one function and passes it as the first argument to the next function.
:::

------------------------------------------------------------------------

<div>

```{r}
#| echo: true
library(dplyr)
library(dslabs)
data(murders)

names(murders)

```

</div>

::: space
:::

::: fragment
```{r}
#| echo: true
library(dplyr)
library(dslabs)
data(murders)

murders %>%
  arrange(desc(total)) %>%  
  mutate(rate_per_million = total / population * 1e6) %>%  
  select(state, rate_per_million)  %>% 
  head()
```
:::

------------------------------------------------------------------------

<div>

While R has powerful data visualization packages like ggplot2, it also comes with several built-in functions for creating basic graphs.

</div>

::: space
:::

::: fragment
These functions can be useful for quick visualizations or when you don't need the advanced features of specialized packages.
:::

::: space
:::

::: fragment
-   `hist()` : Create a histogram.
-   `plot()` : Create a scatter plot.
-   `barplot()` : Create a bar plot.
-   `boxplot()` : Create a box plot.
-   `pie()` : Create a pie chart.
:::

------------------------------------------------------------------------

```{r}
#| echo: true
hist(murders$total)
```

------------------------------------------------------------------------

```{r}
#| echo: true
plot(murders$population/10^6, murders$total)

```

------------------------------------------------------------------------

```{r}
#| echo: true
barplot(murders$total, names.arg = murders$state, las = 2)
```

------------------------------------------------------------------------

```{r}
#| echo: true
boxplot(murders$total ~ murders$region)

```

------------------------------------------------------------------------

```{r}
#| echo: true

pie(tapply(murders$total, murders$region, sum), 
    labels = c("Northeast", "South", "North Central", "West"))

```

## `ggplot2` Package

::: {.fragment .fade-in}
The `ggplot2` package is one of the most popular and powerful data visualization packages in R.
:::

::: {.fragment .fade-in}
It is based on the principles of the Grammar of Graphics, which provides a flexible and consistent framework for creating a wide range of statistical graphics.
:::

::: {.fragment .fade-in}
With ggplot2, you can create highly customizable and publication-quality plots using a layered approach.
:::

::: {.fragment .fade-in}
```{r}
#| echo: true
library(ggplot2)
library(ggrepel)
library(ggthemes)

```
:::

------------------------------------------------------------------------

### There are three main components to a ggplot2 plot:

1.  Data: The dataset to be visualized.
2.  Aesthetic mappings: The relationship between variables and visual properties.
3.  Geometric objects (geoms): The visual elements that represent the data, such as points, lines, or bars.

------------------------------------------------------------------------

```{r}
#| echo: true

ggplot(data = murders, aes(x = population/10^6, y = total))

```

------------------------------------------------------------------------

```{r}
#| echo: true
ggplot(data = murders, aes(x = population/10^6, y = total)) + 
  geom_point(size = 3)
```

------------------------------------------------------------------------

```{r}
#| echo: true
ggplot(data = murders, aes(x = population/10^6, y = total)) + 
  geom_point(size = 3, aes(col = region))
 
```

------------------------------------------------------------------------

```{r}
#| echo: true
ggplot(data = murders, aes(x = population/10^6, y = total)) + 
  geom_point(size = 3, aes(col = region)) +
  geom_text(aes(label = abb))
```

------------------------------------------------------------------------

```{r}
#| echo: true
ggplot(data = murders, aes(x = population/10^6, y = total)) + 
  geom_point(size = 3, aes(col = region)) +
  geom_text(aes(label = abb)) +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1, col = 'grey', linetype = 2)
```

------------------------------------------------------------------------

```{r}
#| echo: true
ggplot(data = murders, aes(x = population/10^6, y = total)) + 
  geom_point(size = 3, aes(col = region)) +
  geom_text(aes(label = abb)) +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1, col = 'grey', linetype = 2)+
  scale_x_log10() +
  scale_y_log10()
```

------------------------------------------------------------------------

```{r}
#| echo: true
ggplot(data = murders, aes(x = population/10^6, y = total)) + 
  geom_point(size = 3, aes(col = region)) +
  geom_text(aes(label = abb)) +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1, col = 'grey', linetype = 2)+
  scale_x_log10() +
  scale_y_log10() +
  xlab("Populations in millions (log scale)") + 
  ylab("Total number of murders (log scale)") +
  ggtitle("US Gun Murders in 2010")
```

------------------------------------------------------------------------

```{r}
#| echo: true
ggplot(data = murders, aes(x = population/10^6, y = total)) + 
  geom_point(size = 3, aes(col = region)) +
  geom_text_repel(aes(label = abb)) +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1, col = 'grey', linetype = 2)+
  scale_x_log10() +
  scale_y_log10() +
  xlab("Populations in millions (log scale)") + 
  ylab("Total number of murders (log scale)") +
  ggtitle("US Gun Murders in 2010") 
```

------------------------------------------------------------------------

```{r}
#| echo: true
p <- ggplot(data = murders, aes(x = population/10^6, y = total)) + 
  geom_point(size = 3, aes(col = region)) +
  geom_text_repel(aes(label = abb)) +
  geom_smooth(method = "lm", se = FALSE, linewidth = 1, col = 'grey', linetype = 2)+
  scale_x_log10() +
  scale_y_log10() +
  xlab("Populations in millions (log scale)") + 
  ylab("Total number of murders (log scale)") +
  ggtitle("US Gun Murders in 2010") +
  theme_economist()
```

------------------------------------------------------------------------

```{r}
#| echo: true
p
```

## `Gapminder`

Gapminder was founded on the realization that many widespread perceptions and beliefs about global development were simply not accurate or based on outdated information. Hans Rosling frequently referred to these as "devastating misconceptions."

> You are probably wrong about it!

## Two Worlds

::: fragment
The "Two World View" is one of the major myths or misconceptions that Gapminder has sought to dispel through its work on data visualization and global development analysis.
:::

::: fragment
The Two World View refers to the oversimplified perception that the world is divided into two distinct groups:
:::

::: fragment
-   The wealthy Western nations/first world (U.S., Western Europe, etc.)
-   The poor developing nations/third world (Africa, Asia, Latin America, etc.)
:::

------------------------------------------------------------------------

::: fragment
> People in the "Third World" had very low life expectancies, while those in the "First World" lived much longer lives.
:::

::: fragment
> High fertility rates causing overpopulation was primarily a problem in poor, developing countries.
:::

::: {.fragment .red}
Again, you are probably wrong about it!
:::

::: fragment
Lets visualize life expectancy and fertility rate of countries in 1962.
:::

------------------------------------------------------------------------

```{r}
#| echo: true
library(tidyverse)
library(gapminder)
library(ggplot2)
theme_set(theme_bw())
library(gt)
gapminder <- dslabs::gapminder

#create head of the data with gt 
gt(gapminder %>% head())
```

------------------------------------------------------------------------

```{r}
#| echo: true
filter(gapminder, year == 1962) |>
  ggplot( aes(fertility, life_expectancy, color = continent)) +
  geom_point(size = 3) 
```

::: fragment
### Is it the same in 2012?
:::

------------------------------------------------------------------------

```{r}
#| echo: true
filter(dslabs::gapminder, year %in% c(1962, 2012)) |>
  ggplot( aes(fertility, life_expectancy, color = continent)) +
  geom_point(size = 3) + facet_grid(~year)
```

------------------------------------------------------------------------

::: {visibility="uncounted"}
``` r
library(gganimate)

dslabs::gapminder  %>% ggplot(aes(x = fertility, y=life_expectancy, size = population, colour = continent)) +
    geom_point( alpha = 0.7) +
    scale_size(range = c(2, 12)) +
    scale_x_log10() +
    transition_time(year) +
    labs(title = "Year: {frame_time}") + theme_minimal()
```
:::

::: fragment
![](images/an2.gif){width="460"}
:::

## GDP vs Life Expectancy

## What is the relationship between GDP and life expectancy across countries and over time?

```{r}
#| echo: true
#| eval: true
dslabs::gapminder %>% filter(year == 2000) %>% head(10)  %>% gt()
```

------------------------------------------------------------------------

##  {auto-animate="true"}

```{r}
#| echo: true
#| eval: true
dslabs::gapminder %>% filter(year == 2000) %>% 
  ggplot()
```

##  {auto-animate="true"}

```{r}
#| echo: true
#| eval: true
dslabs::gapminder %>% filter(year == 2000) %>% 
  ggplot(aes(x = gdp, 
             y=life_expectancy))
```

##  {auto-animate="true"}

```{r}
#| echo: true
#| eval: true
dslabs::gapminder %>% filter(year == 2000) %>% 
  ggplot(aes(x = gdp, 
             y=life_expectancy)) +
  geom_point()
```

##  {auto-animate="true"}

```{r}
#| echo: true
#| eval: true
dslabs::gapminder %>% filter(year == 2000) %>% 
  ggplot(aes(x = gdp, 
             y=life_expectancy)) +
  geom_point() +
  scale_x_log10()
```

##  {auto-animate="true"}

```{r}
#| echo: true
#| eval: true
dslabs::gapminder %>% filter(year == 2000) %>% 
  ggplot(aes(x = gdp, 
             y=life_expectancy, 
             color = continent)) +
  geom_point() +
  scale_x_log10()
```

##  {auto-animate="true"}

```{r}
#| echo: true
#| eval: true
dslabs::gapminder %>% filter(year == 2000) %>% 
  ggplot(aes(x = gdp, 
             y=life_expectancy, 
             color = continent, 
             size = population)) +
  geom_point() +
  scale_x_log10()
```

##  {auto-animate="true"}

```{r}
#| echo: false
#| eval: true
dslabs::gapminder %>% filter(year %in% c(2000)) %>% 
  ggplot(aes(x = gdp, 
             y=life_expectancy, 
             color = continent, 
             size = population)) +
  geom_point() +
  geom_smooth(inherit.aes = F, aes(x = gdp, 
             y=life_expectancy, 
             ), method = 'lm') +
  scale_x_log10() 
  
```

##  {auto-animate="true"}

```{r}
#| echo: true
#| eval: true
dslabs::gapminder %>% filter(year %in% c(1962, 1980, 1990, 2000)) %>% 
  ggplot(aes(x = gdp, 
             y=life_expectancy, 
             color = continent, 
             size = population)) +
  geom_point() +
  scale_x_log10() +
  facet_wrap(~year)
```

# Part 3 - Statistics

## Summary Statistics

::: fragment
`Distribution` is one of the most important concepts in statistics. It is a function that shows the possible values for a variable and how often they occur.
:::

::: fragment
For example, with categorical data, the distribution simply describes the proportion of each unique category.
:::

------------------------------------------------------------------------

<div>

Describe the distribution of the `states.region` dataset.

</div>

::: fragment
```{r}
table(state.region)
```
:::

::: fragment
```{r}
library(tidyverse)
table(state.region) %>% prop.table()
```
:::

## Describing continuous data

::: fragment
### Case study: `Heights` dataset
:::

::: space
:::

::: fragment
```{r}
#| echo=T
library(dslabs)
data("heights")
str(heights)
```
:::

::: space
:::

::: fragment
Similar to what the frequency table does for categorical data, the eCDF defines the distribution for numerical data.
:::

------------------------------------------------------------------------

<div>

```{r}
theme_set(theme_minimal())
heights %>% ggplot(aes(height)) + stat_ecdf()
```

</div>

$F(a) = \mbox{Proportion of data points that are less than or equal to }a$

## Histograms and Smoothed Density Plots

Although the eCDF concept is widely discussed in statistics textbooks, it is not very popular in practice. It is difficult to see if the distribution is symmetric, what ranges contains 95% of the values. Histograms are much preferred because they greatly facilitate answering such questions.

------------------------------------------------------------------------

<div>

```{r}
heights %>% ggplot(aes(height)) + geom_histogram(bins = 35)
```

</div>

------------------------------------------------------------------------

<div>

```{r}
heights %>% ggplot(aes(height)) + geom_density()
```

</div>

In this plot, we no longer have sharp edges at the interval boundaries and many of the local peaks have been removed. Also, the scale of the y-axis changed from counts to density.

## Stratified plots

Lets try to stratify the data by `sex` and see how the distribution changes.

::: fragment
The challenge is to contruct this plot using `ggplot2`.
:::

::: fragment
```{r}
heights %>% ggplot(aes(height, fill = sex)) + geom_density(alpha = 0.3)
```
:::

## Normal Distribution

What percentage of the data is within 1 standard deviation of the mean?

::: fragment
Lets simulate a normal distribution with mean 0 and standard deviation 1.
:::

::: fragment
```{r}
#| echo=T

set.seed(1)
x <- rnorm(1e6)
mean(x > -1 & x < 1)
```
:::

::: fragment
```{r}
#| echo=T
pnorm(1) - pnorm(-1)
```
:::

## Stratified boxplots

::: fragment
Try to construct this plot using `ggplot2`.
:::

::: fragment
```{r}
heights %>% ggplot(aes(y = height, x = sex, fill = sex)) + geom_boxplot(alpha = 0.3)
```
:::

## Comparing means

::: fragment
Lets compare the means of the two groups using a t-test.
:::

::: fragment
```{r}
#| echo=T
t.test(data = heights, height ~ sex)
```
:::

------------------------------------------------------------------------

<div>

```{r}
#| echo=T
t.test(x = heights$height[heights$sex == 'Female'], y = heights$height[heights$sex == 'Male'])
```

</div>

::: space
:::

::: fragment
```{r}
#| echo=T
heights$height[heights$sex == "Male"] %>% mean()
```
:::

::: space
:::

::: fragment
```{r}
#| echo=T
heights$height[!heights$sex == "Male"] %>% mean()
```
:::

------------------------------------------------------------------------

We can calculate the test statistic and print the p-value on the plot, using `ggpubr` package.

::: fragment
```{r}
#| echo=T
library(ggpubr)
heights %>% ggplot(aes(y = height, x =sex, fill = sex)) + geom_boxplot(alpha = 0.3) + stat_compare_means(method = 't.test')
```
:::

------------------------------------------------------------------------

### Some common functions available in `stats` package

::: space
:::

::: bigtable
| **Function**                          | **Description**                                                           |
|------------------------------|------------------------------------------|
| `mean(), median(), sd()`              | Calculate mean, median, and standard deviation                            |
| `t.test(), wilcox.test(), var.test()` | Hypothesis tests (t-test, Wilcoxon test, variance test)                   |
| `cor()`                               | Calculate correlations between variables                                  |
| `dnorm(), pnorm(), qnorm()`           | Density, distribution, and quantile functions for the normal distribution |
| `dpois(), ppois(), qpois()`           | Similar functions for the Poisson distribution                            |
| `dbinom(), pbinom(), qbinom()`        | Functions for the binomial distribution                                   |
| `lm()`                                | Fit linear regression models                                              |
| `glm()`                               | Fit generalized linear models                                             |
| `summary()`                           | Provide model summaries and other summary statistics                      |
:::

## Lady Tasting Tea

::: fragment
R.A Fisher was one of the first statisticians to formalize the concept of hypothesis testing. He was also a great tea lover. He was once challenged by a lady who claimed that she could tell whether the milk or the tea was added first to the cup. Fisher designed an experiment to test her claim.
:::

::: fragment
If she could correctly identify 3 out of 4 milk-first cups correctly, would you be convinced that she could tell the difference?
:::

------------------------------------------------------------------------

### How many ways to select 4 cups from 8?

::: space
:::

::: fragment
$\binom{n}{k} = \frac{n!}{k!(n-k)!}$
:::

::: space
:::

::: fragment
```{r}
#| echo=T
choose(8, 4)
```
:::

::: space
:::

::: fragment
### How many ways to select 3 out of 4 correctly?
:::

::: fragment
```{r}
#| echo=T
choose(4, 3)
```
:::

::: space
:::

::: fragment
### How many ways to incorrectly select 1 out of 4 ?
:::

::: fragment
```{r}
#| echo=T
choose(4, 1)
```
:::

------------------------------------------------------------------------

Therefore, the probability of selecting 3 out of 4 correctly is

::: space
:::

$\frac{\binom{4}{3} \times \binom{4}{1}}{\binom{8}{4}} = \frac{4 \times 4}{70} = 0.2286$

::: space
:::

The probability of selecting all 4 out of 4 correctly is

::: space
:::

$\frac{\binom{4}{4} \times \binom{4}{0}}{\binom{8}{4}} = \frac{1 \times 1}{70} = 0.0143$

::: space
:::

------------------------------------------------------------------------

So, the `p-value`, or the probability of observing 3 out of 4 or more correct guesses, is

::: space
:::

$0.2286 + 0.0143 = 0.2429$

::: space
:::

------------------------------------------------------------------------

<div>

```{r}
#| echo=T
tab <- matrix(c(3,1,1,3),2,2)
rownames(tab)<-c("Poured Before","Poured After")
colnames(tab)<-c("Guessed before","Guessed after")
tab
```

</div>

::: space
:::

::: space
:::

::: fragment
```{r}
#| echo=T, eval=F

fisher.test(tab, alternative="greater")
```
:::

::: space
:::

::: space
:::

::: fragment
#### What we calculated earlier was the `p-value` of the Fisher's exact test.
:::
